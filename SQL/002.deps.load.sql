CREATE OR REPLACE FUNCTION deps.pr_unload() RETURNS VOIDAS $$BEGIN	TRUNCATE TABLE deps.t_deps CASCADE;	TRUNCATE TABLE deps.t_schema CASCADE;	TRUNCATE TABLE deps.t_base_type CASCADE;--	TRUNCATE TABLE deps.t_column CASCADE;END$$ LANGUAGE PLPGSQL 	VOLATILE	SECURITY DEFINER;CREATE OR REPLACE FUNCTION deps.hft_sql_create_foreign_key (fk_oid oid)	RETURNS text AS $$	SELECT REPLACE(		REPLACE(sql_create, 			'%1s', (				SELECT 	string_agg(col.name, E', ')				FROM 	(					SELECT	col.name					FROM	deps.t_foreign_key_column col 					WHERE	col.fk_table_oid = cnstr.master_oid							AND col.fk_oid = $1					ORDER BY	col.position				) AS col(name)	-- colonne tabella master			)		), '%2s', (				SELECT	string_agg(col.name, E', ')				FROM 	(					SELECT	col.name					FROM	deps.t_foreign_key_column col 					WHERE	col.fk_table_oid = cnstr.foreign_oid							AND col.fk_oid = $1					ORDER BY	col.position				) AS col(name)	-- colonne tabella slave			)		)	FROM	deps.t_foreign_key AS cnstr	WHERE	cnstr.oid = $1;$$ LANGUAGE SQL	STABLE STRICT	SECURITY DEFINER;		CREATE OR REPLACE FUNCTION deps.hpr_load_composite_type(ct_oid oid, ct_kind char(1)) RETURNS VOIDAS $$DECLARE	_i oid;	_sql_create text DEFAULT '';	_sql_extra_create text DEFAULT '';	_sql_extra_drop text DEFAULT '';BEGIN	INSERT INTO deps.t_column 		SELECT * FROM deps.fv_columns( $1 );	INSERT INTO deps.t_rule 		SELECT * FROM deps.fv_rules( $1 );	INSERT INTO deps.t_trigger 		SELECT * FROM deps.fv_triggers( $1 );		INSERT INTO deps.t_pk_unique 		SELECT * FROM deps.fv_pk_uniques( $1 );	INSERT INTO deps.t_pk_unique_column (		SELECT (x.r).* 		FROM (			SELECT deps.fv_pk_unique_columns( oid ) 			FROM deps.t_pk_unique 			WHERE composite_type_oid = $1) AS x(r)	);		INSERT INTO deps.t_foreign_key 		SELECT * FROM deps.fv_foreign_keys( $1 );	INSERT INTO deps.t_foreign_key_column (		SELECT (x.r).* 		FROM (			SELECT deps.fv_foreign_key_columns( oid ) 			FROM deps.t_foreign_key 			WHERE master_oid = $1) AS x(r)	);		FOR _i IN (SELECT oid FROM deps.t_foreign_key WHERE master_oid = $1) LOOP		UPDATE deps.t_foreign_key		SET sql_create = deps.hft_sql_create_foreign_key(_i)		WHERE oid = _i;	END LOOP;		INSERT INTO deps.t_check 		SELECT * FROM deps.fv_checks( $1 );		-- add columns in create of types and tables	_sql_create := _sql_create || (		SELECT string_agg(x.coldef, E'\n\t,')		FROM	(			SELECT	format('%I %s %s NULL', c.name, c.type_name, bo.fa_iif(c.not_null, 'NOT'::text, '')) || COALESCE(' DEFAULT ' || c.default_value, '')			FROM	deps.t_column c			WHERE	c.composite_type_oid = $1			ORDER BY	c.position		) AS x(coldef)	);	-- add primary keys and unique constraints to types and tables	_sql_create := _sql_create || COALESCE(E'\n\n\t,' || (		SELECT string_agg(x.cnstrdef, E'\n\t,')		FROM	(			SELECT 				format('CONSTRAINT %I %s (%s)', cnstr.name, deps.hft_pk_kind(cnstr.object_kind), string_agg(cn_col.name, E', '))			FROM	deps.t_pk_unique AS cnstr			JOIN	deps.t_pk_unique_column AS cn_col ON cnstr.oid = cn_col.pk_unique_oid			WHERE 	cnstr.composite_type_oid = $1				GROUP BY				cnstr.name				,cnstr.object_kind			ORDER BY				cnstr.object_kind				,cnstr.name		) AS x(cnstrdef)	), '');		-- add check constraints	_sql_create := _sql_create || COALESCE(E'\n\n\t,' || (		SELECT string_agg(x.chkdef, E'\n\t,')		FROM	(			SELECT 				format('CONSTRAINT %I CHECK %s', cnstr.conname, cnstr.consrc)			FROM	pg_constraint AS cnstr			WHERE 	cnstr.conrelid = $1					AND cnstr.contype = 'c'		) AS x(chkdef)	), '');		-- add foreign keys	_sql_extra_create := _sql_extra_create || COALESCE((		SELECT	string_agg(fk.sqldef, E'\n\n')		FROM	(			SELECT	fk.sql_create			FROM	deps.t_foreign_key AS fk			WHERE	fk.master_oid = $1		) AS fk(sqldef)	) || E'\n\n', '');		-- add rules	_sql_extra_create := _sql_extra_create || COALESCE((		SELECT 	string_agg(sql_create, E'\n\n')		FROM	(			SELECT 	* 			FROM 	deps.t_rule			WHERE	composite_type_oid = $1			ORDER BY	name		) sub	) || E'\n', '');	_sql_extra_drop := _sql_extra_drop || (		SELECT 	string_agg(sql_drop, E'\n\n')		FROM	(			SELECT 	* 			FROM 	deps.t_rule			WHERE	composite_type_oid = $1			ORDER BY	name		) sub	);	-- in views, add explicit defaults	IF $2 = 'V' THEN		_sql_extra_create := _sql_extra_create || COALESCE((			SELECT	string_agg(x.coldef, E'\n')			FROM	(				SELECT	format('ALTER VIEW %s ALTER COLUMN %I SET DEFAULT %s;', deps.ft_object_fullname($1), c.name, c.default_value)				FROM	deps.t_column c				WHERE	c.composite_type_oid = $1						AND c.default_value IS NOT NULL				ORDER BY	c.position			) AS x(coldef)		), '');	END IF;	UPDATE 	deps.t_composite_type 	SET 	sql_create = REPLACE(sql_create, '%s', _sql_create) || E'\n\n' || _sql_extra_create			,sql_drop = COALESCE(_sql_extra_drop || E'\n' || sql_drop, sql_drop)	WHERE	oid = $1;END$$ LANGUAGE PLPGSQL 	VOLATILE	SECURITY DEFINER;CREATE OR REPLACE FUNCTION deps.hft_opchar_escape(char_seq TEXT) RETURNS TEXTAS $$DECLARE	_i TEXT;	_rt TEXT = char_seq;BEGIN	FOREACH _i IN ARRAY string_to_array('+-*|?', null) LOOP		_rt := REPLACE(_rt, _i, E'\\' || _i);	END LOOP;	RETURN _rt;END$$ LANGUAGE PLPGSQL 	IMMUTABLE STRICT	SECURITY DEFINER;CREATE OR REPLACE FUNCTION deps.pr_load() RETURNS VOIDAS $$DECLARE	_skm oid;	_ctype oid;	_ckind char(1);	_opchars text = deps.hft_opchar_escape('+-*/<>=~@#%^&|`?');BEGIN	-- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----	-- cleanup	PERFORM deps.pr_unload();	-- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----	-- fill	INSERT INTO deps.t_base_type SELECT * FROM deps.fv_base_types();	INSERT INTO deps.t_schema SELECT * FROM deps.fv_schemas();	-- fill schema objects	FOR _skm	IN	SELECT oid FROM deps.t_schema	LOOP		INSERT INTO deps.t_function SELECT * FROM deps.fv_functions( _skm );		INSERT INTO deps.t_operator SELECT * FROM deps.fv_operators( _skm );		INSERT INTO deps.t_composite_type SELECT * FROM deps.fv_composite_types( _skm );		INSERT INTO deps.t_composite_type SELECT * FROM deps.fv_tables( _skm );		INSERT INTO deps.t_composite_type SELECT * FROM deps.fv_views( _skm );	END LOOP;	-- fill composite type columns, rules, triggers	FOR _ctype, _ckind	IN	SELECT oid, object_kind FROM deps.t_composite_type	LOOP		PERFORM deps.hpr_load_composite_type(_ctype, _ckind);	END LOOP;		-- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----	-- dependencies	-- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----	-- schemas	INSERT INTO deps.t_deps(oid_master, oid_cascades_to)	SELECT	schema_oid, oid	FROM	deps.t_composite_type;	INSERT INTO deps.t_deps(oid_master, oid_cascades_to)	SELECT	schema_oid, oid	FROM	deps.t_function;	INSERT INTO deps.t_deps(oid_master, oid_cascades_to)	SELECT	schema_oid, oid	FROM	deps.t_operator;	-- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----	-- table -> inbound foreign keys	INSERT INTO deps.t_deps(oid_master, oid_cascades_to)	SELECT	fk.foreign_oid, fk.oid	FROM	deps.t_foreign_key fk;	-- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----	-- for each foreign key table -> table	INSERT INTO deps.t_deps(oid_master, oid_cascades_to)	SELECT	fk.foreign_oid, fk.master_oid	FROM	deps.t_foreign_key fk;	-- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----	-- functions	INSERT INTO deps.t_deps(oid_master, oid_cascades_to)	SELECT 	unnest(used_type_oids), oid	FROM 	deps.t_function;	-- function -> function	INSERT INTO deps.t_deps(oid_master, oid_cascades_to)	SELECT	master.oid, slave.oid	FROM	deps.t_function master, deps.t_function slave	WHERE	slave.sql_create ~ (E'\\W' || master.fullname || E'\\W')			AND master.oid != slave.oid			AND NOT EXISTS(SELECT 1 FROM deps.t_trigger trg WHERE trg.function_oid IN(master.oid, slave.oid));	-- function -> view	INSERT INTO deps.t_deps(oid_master, oid_cascades_to)	SELECT	master.oid, slave.oid	FROM	deps.t_function master, deps.t_composite_type slave	WHERE	slave.sql_create ~ (E'\\W' || master.fullname || E'\\W');	-- function -> operator	INSERT INTO deps.t_deps(oid_master, oid_cascades_to)	SELECT	master.oid, op.oid	FROM	deps.t_function master	JOIN	deps.t_operator op ON master.oid IN (op.func_oid, op.comm_oid, op.neg_oid);	-- function -> trigger	INSERT INTO deps.t_deps(oid_master, oid_cascades_to)	SELECT	t.function_oid, t.oid	FROM	deps.t_trigger t;	-- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----	-- views	-- view / table / type -> view	INSERT INTO deps.t_deps(oid_master, oid_cascades_to)	SELECT	DISTINCT t.oid, v.oid	FROM	deps.t_composite_type t	JOIN	pg_depend dep ON t.oid = dep.refobjid	JOIN	pg_rewrite r ON dep.objid = r.oid	JOIN	deps.t_composite_type v ON r.ev_class = v.oid	WHERE	v.object_kind = 'V'			AND t.oid != v.oid;	-- view / table / type -> operator	INSERT INTO deps.t_deps(oid_master, oid_cascades_to)	SELECT	master.oid, op.oid	FROM	deps.t_composite_type master	JOIN	deps.t_operator op ON master.oid IN (op.ret_oid, op.left_oid, op.right_oid);	-- view / table -> trigger	INSERT INTO deps.t_deps(oid_master, oid_cascades_to)	SELECT	t.composite_type_oid, t.oid	FROM	deps.t_trigger t;	-- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----	-- operators	-- operator -> function	INSERT INTO deps.t_deps(oid_master, oid_cascades_to)	SELECT	master.oid, slave.oid	FROM	deps.t_operator master, deps.t_function slave	WHERE	slave.sql_create ~ ('[^' || _opchars || ']' 								|| deps.hft_opchar_escape(master.name)								|| '[^' || _opchars || ']');	-- operator -> view	INSERT INTO deps.t_deps(oid_master, oid_cascades_to)	SELECT	master.oid, slave.oid	FROM	deps.t_operator master, deps.t_composite_type slave	WHERE	slave.object_kind = 'V'			AND slave.sql_create ~ ('[^' || _opchars || ']' 								|| deps.hft_opchar_escape(master.name)								|| '[^' || _opchars || ']');END $$LANGUAGE PLPGSQL	VOLATILE	SECURITY DEFINER;